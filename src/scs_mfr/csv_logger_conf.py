#!/usr/bin/env python3

"""
Created on 18 Apr 2018

@author: Bruno Beloff (bruno.beloff@southcoastscience.com)

DESCRIPTION
The csv_logger_conf utility is used to specify the filesystem path to the log files generated by csv_logger. It also
specifies the csv_logger behaviour when the volume becomes full: if delete-oldest is true, the oldest logs are
removed to make space, if false, then logging stops. A write-interval parameter may be used to specify time between
flushes, in order to extend the life of SD cards.

The --limit-retrospection flag is used to prevent an unwanted data backlog from being published. When used, this
flag sets the limit to now. When the system is restarted, the backlog will be ignored. (Backlog data remains on
the SD card.)

The --filesystem flag is used to report on the condition of the filesystem that will be used by the csv_logger.

Note that the logging process(es) must be restarted for configuration changes to take effect.

SYNOPSIS
csv_logger_conf.py [{ -f | [-r ROOT_PATH] [-o DELETE_OLDEST] [-i WRITE_INTERVAL] [-l] | -d }] [-v]

EXAMPLES
./csv_logger_conf.py -r /srv/removable_data_storage -o 1 -i 0
./csv_logger_conf.py -f

FILES
~/SCS/conf/csv_logger_conf.json

DOCUMENT EXAMPLE - CONFIGURATION
{"root-path": "/srv/removable_data_storage", "delete-oldest": true, "write-interval": 0,
"retrospection-limit": "2023-07-25T11:36:30Z"}

DOCUMENT EXAMPLE - FILESYSTEM REPORT
{"path": "/srv/removable_data_storage", "is-available": true, "on-root": false}

SEE ALSO
scs_dev/csv_logger
"""

import sys

from scs_core.csv.csv_logger_conf import CSVLoggerConf

from scs_core.data.datetime import LocalizedDatetime
from scs_core.data.json import JSONify

from scs_core.sys.filesystem import Filesystem
from scs_core.sys.logging import Logging

from scs_host.sys.host import Host

from scs_mfr.cmd.cmd_csv_logger_conf import CmdCSVLoggerConf


# --------------------------------------------------------------------------------------------------------------------

if __name__ == '__main__':

    report = None

    # ----------------------------------------------------------------------------------------------------------------
    # cmd...

    cmd = CmdCSVLoggerConf()

    if not cmd.is_valid():
        cmd.print_help(sys.stderr)
        exit(2)

    # logging...
    Logging.config('csv_logger_conf', verbose=cmd.verbose)
    logger = Logging.getLogger()

    logger.info(cmd)


    # ----------------------------------------------------------------------------------------------------------------
    # resources...

    # check for existing document...
    conf = CSVLoggerConf.load(Host)


    # ----------------------------------------------------------------------------------------------------------------
    # run...

    if cmd.filesystem:
        if conf is None:
            logger.error("No configuration is present.")
            exit(1)

        report = conf.filesystem_report()

    elif cmd.set():
        if conf is None and not cmd.is_complete():
            logger.error("No configuration is present - you must therefore set all fields.")
            cmd.print_help(sys.stderr)
            exit(2)

        root_path = conf.root_path if cmd.root_path is None else cmd.root_path
        delete_oldest = conf.delete_oldest if cmd.delete_oldest is None else cmd.delete_oldest
        write_interval = conf.write_interval if cmd.write_interval is None else cmd.write_interval
        retrospection_limit = LocalizedDatetime.now() if cmd.limit_retrospection else conf.retrospection_limit

        try:
            Filesystem.mkdir(root_path)
        except PermissionError:
            logger.error("You do not have permission to write in that directory.")
            exit(1)

        report = CSVLoggerConf(root_path, delete_oldest, write_interval, retrospection_limit)
        report.save(Host)

    elif cmd.delete and conf is not None:
        conf.delete(Host)
        report = None

    else:
        report = conf

    if report:
        print(JSONify.dumps(report))
